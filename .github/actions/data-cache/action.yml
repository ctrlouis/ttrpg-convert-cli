name: 'Tools data cache'
description: 'find latest release; construct cache key; fetch/build cache'

inputs:
  failIfMissing:
    description: "Should the job fail if missing"
    default: "false"

outputs:
  cache_key:
    description: Cache retrieval key
    value: ${{ steps.test_data.outputs.cache_key }}

runs:
  using: "composite"
  steps:

    - name: 5eTools release cache key
      id: test_data
      shell: bash
      run: |
        LATEST_5E_VERSION=$(curl -sLH 'Accept: application/json' https://api.github.com/repos/5etools-mirror-3/5etools-src/releases/latest | jq -r .tag_name)
        LATEST_PF2E_VERSION=$(curl -sLH 'Accept: application/json' https://api.github.com/repos/Pf2eToolsOrg/Pf2eTools/releases/latest | jq -r .tag_name)

        LATEST_VERSION=5e.${LATEST_5E_VERSION}-Pf2e.${LATEST_PF2E_VERSION}
        PREFIX="TestData-"
        KEY=${PREFIX}${LATEST_VERSION}

        echo "ðŸ”¹ Use 5eTools $LATEST_5E_VERSION and Pf2eTools $LATEST_PF2E_VERSION"
        echo "cache_key_prefix=${PREFIX}" >> $GITHUB_OUTPUT
        echo "cache_key=${KEY}" >> $GITHUB_OUTPUT

        echo "version_5e=${LATEST_5E_VERSION}" >> $GITHUB_OUTPUT
        echo "version_pf2e=${LATEST_PF2E_VERSION}" >> $GITHUB_OUTPUT

    - name: Check Cache Data
      id: test_data_check
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: sources
        key: ${{ steps.test_data.outputs.cache_key }}
        fail-on-cache-miss: ${{ inputs.failIfMissing == 'true' }}
        enableCrossOsArchive: true

    - name: Download Test Data
      id: test-data-download
      if: steps.test_data_check.outputs.cache-hit != 'true'
      shell: bash
      env:
        LATEST_5E_VERSION: ${{ steps.test_data.outputs.version_5e }}
        LATEST_PF2E_VERSION: ${{ steps.test_data.outputs.version_pf2e }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "ðŸ”¹ Download 5e $LATEST_5E_VERSION"

        # sparse clone of src
        mkdir -p sources/5etools-src
        git clone --quiet --depth=1 -b ${LATEST_5E_VERSION} \
            -c advice.detachedHead=false \
            --no-checkout \
            https://github.com/5etools-mirror-3/5etools-src.git sources/5etools-src
        pushd sources/5etools-src
          git sparse-checkout init
          git sparse-checkout set data
          git checkout ${LATEST_5E_VERSION}
          rm -rf .git
          rm -f *.png
          rm -f *.html
          rm -f *.zip
        popd

        mkdir -p sources/5etools-img
        gh release download ${LATEST_5E_VERSION} -D sources/5etools-img -R 5etools-mirror-3/5etools-img
        pushd sources/5etools-img
          zip -FF img-${LATEST_5E_VERSION}.zip --out fixed.zip
          unzip -q fixed.zip
          rm *.z*
          du -sh .
          # replace all images w/ empty files. We don't care about image content for test purposes
          find img -type f | while read FILE; do echo > "$FILE"; done
          mv img/* .
          du -sh .
        popd

        echo "ðŸ”¹ 5eTools: Download Homebrew"

        # Don't grab all of homebrew. Too big
        mkdir -p sources/5e-homebrew/adventure
        mkdir -p sources/5e-homebrew/background
        mkdir -p sources/5e-homebrew/book
        mkdir -p sources/5e-homebrew/class
        mkdir -p sources/5e-homebrew/collection
        mkdir -p sources/5e-homebrew/creature
        mkdir -p sources/5e-homebrew/deity
        mkdir -p sources/5e-homebrew/optionalfeature
        mkdir -p sources/5e-homebrew/race
        mkdir -p sources/5e-homebrew/subclass

        paths=(
        "collection/MCDM Productions; Strongholds and Followers.json"
        "adventure/Anthony Joyce; The Blood Hunter Adventure.json"
        "adventure/Arcanum Worlds; Odyssey of the Dragonlords.json"
        "adventure/JVC Parry; Call from the Deep.json"
        "adventure/Kobold Press; Book of Lairs.json"
        "background/D&D Wiki; Featured Quality Backgrounds.json"
        "book/Ghostfire Gaming; Grim Hollow Campaign Guide.json"
        "book/Ghostfire Gaming; Stibbles Codex of Companions.json"
        "book/MCDM Productions; Arcadia Issue 3.json"
        "class/D&D Wiki; Swashbuckler.json"
        "class/Foxfire94; Vampire.json"
        "class/KibblesTasty; Inventor.json"
        "class/LaserLlama; Alternate Barbarian.json"
        "class/Matthew Mercer; Blood Hunter (2022).json"
        "class/badooga; Badooga's Psion.json"
        "collection/Arcana Games; Arkadia.json"
        "collection/Ghostfire Gaming; Grim Hollow - The Monster Grimoire.json"
        "collection/Jasmine Yang; Hamund's Herbalism Handbook.json"
        "collection/Keith Baker; Exploring Eberron.json"
        "collection/Kobold Press; Deep Magic 14 Elemental Magic.json"
        "collection/Kobold Press; Deep Magic.json"
        "collection/Loot Tavern; Heliana's Guide To Monster Hunting.json"
        "collection/MCDM Productions; The Talent and Psionics Open Playtest Round 2.json"
        "collection/Mage Hand Press; Valda's Spire of Secrets.json"
        "creature/Dragonix; Monster Manual Expanded III.json"
        "creature/Kobold Press; Creature Codex.json"
        "creature/Kobold Press; Tome of Beasts 2.json"
        "creature/Kobold Press; Tome of Beasts.json"
        "creature/MCDM Productions; Flee, Mortals! preview.json"
        "creature/MCDM Productions; Flee, Mortals!.json"
        "creature/Nerzugal Role-Playing; Nerzugal's Extended Bestiary.json"
        "deity/Frog God Games; The Lost Lands.json"
        "optionalfeature/laserllama; Laserllama's Exploit Compendium.json"
        "race/Middle Finger of Vecna; Archon.json"
        "subclass/LaserLlama; Druid Circles.json"
        )

        for i in "${paths[@]}"; do
          echo "$i"
          url=${i// /%20}
          echo "$url"
          curl -s -S -L -o "sources/5e-homebrew/$i" "https://raw.githubusercontent.com/TheGiddyLimit/homebrew/refs/heads/master/${url}"
        done

        echo "ðŸ”¹ 5eTools: Download Unearthed Arcana"

        # Don't grab all of unearthed arcana
        mkdir -p sources/5e-unearthed-arcana/collection

        paths=(
        "collection/Unearthed Arcana - Downtime.json"
        "collection/Unearthed Arcana - Encounter Building.json"
        "collection/Unearthed Arcana - Into the Wild.json"
        "collection/Unearthed Arcana - Quick Characters.json"
        "collection/Unearthed Arcana - Traps Revisited.json"
        "collection/Unearthed Arcana - When Armies Clash.json"
        "collection/Unearthed Arcana 2022 - Character Origins.json"
        "collection/Unearthed Arcana 2022 - Expert Classes.json"
        "collection/Unearthed Arcana 2022 - The Cleric and Revised Species.json"
        "collection/Unearthed Arcana 2023 - Bastions and Cantrips.json"
        "collection/Unearthed Arcana 2023 - Druid & Paladin.json"
        "collection/Unearthed Arcana 2023 - Player's Handbook Playtest 5.json"
        "collection/Unearthed Arcana 2023 - Player's Handbook Playtest 6.json"
        "collection/Unearthed Arcana 2023 - Player's Handbook Playtest 7.json"
        )

        for i in "${paths[@]}"; do
          echo "$i"
          url=${i// /%20}
          echo "$url"
          curl -s -S -L -o "sources/5e-unearthed-arcana/$i" "https://raw.githubusercontent.com/TheGiddyLimit/unearthed-arcana/refs/heads/master/${url}"
        done

        echo "ðŸ”¹ Pf2eTools Download ${LATEST_PF2E_VERSION}"

        # sparse clone of src
        mkdir -p sources/Pf2eTools
        git clone --quiet --depth=1 -b ${LATEST_PF2E_VERSION} \
            -c advice.detachedHead=false \
            --no-checkout \
            https://github.com/Pf2eToolsOrg/Pf2eTools.git sources/Pf2eTools
        pushd sources/Pf2eTools
          git sparse-checkout init
          git sparse-checkout set data img
          git checkout ${LATEST_VERSION}
          rm -rf .git
          rm -f *.png
          rm -f *.html
          rm -f *.xml
          find img -type f | while read FILE; do echo > "$FILE"; done
        popd

        ls -al sources
        du -sh sources

    - name: Always Save Cache
      id: test_data_save
      if: always() && steps.test_data_check.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.test_data.outputs.cache_key }}
        path: sources
